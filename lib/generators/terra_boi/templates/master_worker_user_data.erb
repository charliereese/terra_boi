#!/bin/bash
sleep 5

# Set ENV vars from terraform
echo "APPLICATION_NAME=${application_name}" >> /etc/environment
echo "DB_HOST=${db_address}" >> /etc/environment
echo "DB_USERNAME=${db_username}" >> /etc/environment
echo "RAILS_ENV=production" >> /etc/environment
echo "INFRASTRUCTURE_ENV=${env}" >> /etc/environment

# Load ENV vars in current session
for line in $( cat /etc/environment ); do export $line; done

# Set DB environment variables in docker container and
# start rake jobs:work
# https://medium.com/@oprearocks/how-to-properly-override-the-entrypoint-using-docker-run-2e081e5feb9d
docker container run --entrypoint "rake" -p 3000:3000 --name $APPLICATION_NAME --restart always -d \
-e DB_HOST=$DB_HOST \
-e DB_USERNAME=$DB_USERNAME \
-e DB_PASSWORD=$DB_PASSWORD \
-e RAILS_ENV=$RAILS_ENV \
-e INFRASTRUCTURE_ENV=$INFRASTRUCTURE_ENV \
-e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
-e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
-e RAILS_MASTER_KEY=$RAILS_MASTER_KEY \
-e RAILS_SERVE_STATIC_FILES=true \
$DOCKERHUB_USERNAME/$APPLICATION_NAME:latest jobs:work

# Run outstanding DB migrations
docker container exec $APPLICATION_NAME rake db:migrate

# Update and run cron
docker container exec $APPLICATION_NAME whenever --update-crontab
docker container exec $APPLICATION_NAME service cron start